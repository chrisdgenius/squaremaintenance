{"version":3,"file":"cloudinary-ng.js","sources":["../../src/lib/version.ts","../../src/internal/SDKAnalyticsConstants.ts","../../src/lib/cloudinary-image.component.ts","../../src/lib/cloudinary-video.component.ts","../../src/lib/cloudinary.module.ts","../../src/public_api.ts","../../src/cloudinary-ng.ts"],"sourcesContent":["export let APP_VERSION = '1.11.1';\n","import {VERSION} from '@angular/core';\nimport {APP_VERSION} from '../lib/version';\n\n/**\n * Used by SDK Analytics as a token (?a_{token})\n */\nexport const SDKAnalyticsConstants = {\n  sdkSemver: APP_VERSION,\n  techVersion: VERSION.full,\n  sdkCode: 'K'\n};\n","import {Component, OnInit, Input, ElementRef, OnDestroy, OnChanges} from '@angular/core';\nimport {CloudinaryImage} from '@cloudinary/url-gen/assets/CloudinaryImage';\nimport {\n  cancelCurrentlyRunningPlugins,\n  HtmlImageLayer,\n  Plugins\n} from '@cloudinary/html';\nimport {SDKAnalyticsConstants} from '../internal/SDKAnalyticsConstants';\n\n/**\n * @mixin AngularSDK\n * @description The Cloudinary Angular SDK contains components like \\<advanced-image\\> to easily render your media assets from\n * Cloudinary. The SDK also comes with support for optional JS plugins that make the components smart, with features\n * like lazy loading, placeholder, accessibility & responsiveness.\n *\n * @example\n * <caption>\n *  Please note that the order of the plugins is important. See {@link https://cloudinary.com/documentation/sdks/js/frontend-frameworks/index.html#plugin-order|Plugin Order} for more details.\n * </caption>\n * // In your app.module.ts inject the library.\n * import { CloudinaryModule} from '@cloudinary/angular';\n *\n * imports: [\n *   ...,\n *   CloudinaryModule,\n * ],\n *\n * // In your component.ts use `@cloudinary/url-gen` to generate your transformations.\n * // Import the plugins you wish to use\n *\n * import {CloudinaryImage} from \"@cloudinary/url-gen/assets/CloudinaryImage\";\n * import {\n *  AdvancedImage,\n *  accessibility,\n *  responsive,\n *  lazyload,\n *  placeholder\n * } from '@cloudinary/angular';\n *\n * ngOnInit() {\n *   const myCld = new Cloudinary({ cloudName: 'demo'});\n *   this.img = myCld().image('sample');\n *\n *   this.plugins = [lazyload(), placeholder()]\n * }\n *\n * // In your view add the component with your transformation.\n * <advanced-image [cldImg]=\"this.img\" [plugins]=\"this.plugins\"></advanced-image>\n */\n\n/**\n * @memberOf AngularSDK\n * @type {Component}\n * @description The Cloudinary image component.\n * @prop {CloudinaryImage} transformation Generated by @cloudinary/url-gen\n * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()\n * @prop imageAttributes Optional attributes include alt, width, height, loading\n */\n@Component({\n  selector: 'advanced-image',\n  template: `\n    <img />\n  `,\n  styleUrls: ['./cloudinary-image.component.css']\n})\nexport class CloudinaryImageComponent implements OnInit, OnChanges, OnDestroy {\n  @Input('cldImg') cldImg: CloudinaryImage;\n  @Input('plugins') plugins: Plugins;\n  @Input('alt') alt: string;\n  @Input('width') width: string;\n  @Input('height') height: string;\n  @Input('loading') loading: string;\n  htmlLayerInstance: HtmlImageLayer;\n  constructor(private el: ElementRef) { }\n\n  /**\n   * On init creates a new HTMLLayer instance and initializes with ref to img element,\n   * user generated cloudinaryImage and the plugins to be used.\n   */\n  ngOnInit() {\n    this.htmlLayerInstance = new HtmlImageLayer(this.el.nativeElement.children[0], this.cldImg, this.plugins, SDKAnalyticsConstants);\n    this.addAttributes();\n  }\n\n  /**\n   * On update, we cancel running plugins and update the image instance with the state of user\n   * cloudinaryImage and the state of plugins.\n   */\n  ngOnChanges() {\n    if (this.htmlLayerInstance) {\n      cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);\n      this.htmlLayerInstance.update(this.cldImg, this.plugins, SDKAnalyticsConstants);\n    }\n  }\n\n  /**\n   * On destroy, we cancel the currently running plugins.\n   */\n  ngOnDestroy() {\n    // safely cancel running events on destroy\n    cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);\n  }\n\n  /**\n   * Add attributes to img element.\n   */\n  addAttributes() {\n    ['alt', 'width', 'height', 'loading'].forEach(attr => {\n      if (this[attr]) {\n        this.el.nativeElement.children[0].setAttribute(attr, this[attr]);\n        this.el.nativeElement.removeAttribute(attr);\n      }\n    });\n  }\n}\n","import {Component, OnInit, Input, ElementRef, EventEmitter, Output, OnChanges, OnDestroy} from '@angular/core';\nimport {CloudinaryVideo} from '@cloudinary/url-gen';\n\nimport {\n  cancelCurrentlyRunningPlugins,\n  HtmlVideoLayer,\n  Plugins,\n  VideoPoster,\n  VideoSources\n} from '@cloudinary/html';\n\n\n/**\n * @memberOf AngularSDK\n * @type {Component}\n * @description The Cloudinary video component.\n * @prop {CloudinaryVideo} transformation Generated by @cloudinary/url-gen\n * @prop {VideoPoster} transformation Generated by @cloudinary/url-gen\n * @prop {Plugins} plugins Advanced image component plugins lazyload()\n * @prop videoAttributes Optional attributes include controls, loop, muted, poster, preload, autoplay\n * @prop videoEvents Optional video events include play, loadstart, playing, error, ended\n * @prop {VideoSources} sources Optional sources to generate\n * @example\n *  <caption>\n *  Using custom defined resources.\n * </caption>\n *   vid = new CloudinaryVideo('dog', {cloudName: 'demo'});\n *   sources = [\n {\n        type: 'mp4',\n        codecs: ['vp8', 'vorbis'],\n        transcode: videoCodec(auto())\n},\n {\n        type: 'webm',\n        codecs: ['avc1.4D401E', 'mp4a.40.2'],\n         transcode: videoCodec(auto())\n      }];\n *\n * <advanced-video [cldvid]=\"vid\" [sources]=\"sources\" controls></advanced-video>\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'advanced-video',\n  template: `<video (play)=\"emitPlayEvent()\"\n                    (loadstart)=\"emitLoadstartEvent()\"\n                    (playing)=\"emitPlayingEvent()\"\n                    (error)=\"emitErrorEvent\"\n                    (ended)=\"emitEndedEvent\">\n            </video>`,\n})\nexport class CloudinaryVideoComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(private el: ElementRef) { }\n\n  @Input('cldVid') cldVid: CloudinaryVideo;\n  @Input('cldPoster') cldPoster: VideoPoster;\n  @Input('sources') sources: VideoSources;\n  @Input('plugins') plugins: Plugins;\n  @Input('poster') poster: string;\n  @Input('innerRef') innerRef: ElementRef;\n\n  // Event emitters\n  @Output() play: EventEmitter<any> = new EventEmitter();\n  @Output() loadstart: EventEmitter<any> = new EventEmitter();\n  @Output() playing: EventEmitter<any> = new EventEmitter();\n  @Output() error: EventEmitter<any> = new EventEmitter();\n  @Output() ended: EventEmitter<any> = new EventEmitter();\n\n  // supported video attributes\n  controls = this.el.nativeElement.attributes.controls;\n  loop = this.el.nativeElement.attributes.loop;\n  muted = this.el.nativeElement.attributes.muted;\n  preload = this.el.nativeElement.attributes.preload;\n  autoPlay = this.el.nativeElement.attributes.autoplay;\n  playsInline = this.el.nativeElement.attributes.playsInline;\n\n  private htmlVideoLayerInstance: HtmlVideoLayer;\n\n  /**\n   * On init creates a new HTMLVideoLayer instance and initializes with ref to video element,\n   * user generated cloudinaryVideo and the plugins to be used.\n   */\n  ngOnInit() {\n    this.htmlVideoLayerInstance = new HtmlVideoLayer(\n      this.el.nativeElement.children[0],\n      this.cldVid,\n      this.sources,\n      this.plugins,\n      this.getVideoAttributes(),\n      this.cldPoster\n      );\n\n    // check if video should be muted. We need to take care of this here since Angular has a bug with binding the muted\n    // attribute\n    if (this.muted) {\n      this.el.nativeElement.children[0].muted = true;\n    }\n\n    // attach ref to innerRef input\n    this.attachRef();\n  }\n\n  /**\n   * On update, we cancel running plugins and update the video instance if the src\n   * was changed.\n   */\n  ngOnChanges() {\n    if (this.htmlVideoLayerInstance) {\n      cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);\n      this.htmlVideoLayerInstance.update(this.cldVid, this.sources, this.plugins, this.getVideoAttributes(), this.cldPoster);\n    }\n  }\n\n  /**\n   * On destroy, we cancel the currently running plugins.\n   */\n  ngOnDestroy() {\n    // Safely cancel running events on destroy\n    cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);\n  }\n\n  /**\n   * Returns video attributes.\n   */\n  getVideoAttributes() {\n    return {\n      controls: this.controls,\n      loop: this.loop,\n      muted: this.muted,\n      poster: this.poster,\n      preload: this.preload,\n      autoplay: this.autoPlay,\n      playsinline: this.playsInline\n    };\n  }\n\n  emitPlayEvent() {\n    this.play.emit();\n  }\n\n  emitLoadstartEvent() {\n    this.loadstart.emit();\n  }\n\n  emitPlayingEvent() {\n    this.playing.emit();\n  }\n\n  emitErrorEvent() {\n    this.error.emit();\n  }\n\n  emitEndedEvent() {\n    this.ended.emit();\n  }\n\n  /**\n   * Attach both this.videoRef and props.innerRef as ref to the given element.\n   */\n  attachRef() {\n    if (this.innerRef) {\n      this.innerRef.nativeElement = this.el.nativeElement.children[0];\n    }\n  }\n}\n","import { NgModule, enableProdMode } from '@angular/core';\nimport { CloudinaryImageComponent } from './cloudinary-image.component';\nimport { CloudinaryVideoComponent } from './cloudinary-video.component';\n\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [CloudinaryImageComponent, CloudinaryVideoComponent],\n  exports: [CloudinaryImageComponent, CloudinaryVideoComponent]\n})\nexport class CloudinaryModule { }\n","/*\n * Public API Surface of cloudinary-library\n */\n\nimport {\n  placeholder,\n  accessibility,\n  lazyload,\n  responsive,\n} from '@cloudinary/html';\nexport {placeholder, accessibility, lazyload, responsive};\n\nexport * from './lib/cloudinary.module';\nexport * from './lib/cloudinary-video.component';\nexport * from './lib/cloudinary-image.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}