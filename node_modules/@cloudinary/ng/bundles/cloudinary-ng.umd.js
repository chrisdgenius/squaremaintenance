(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@cloudinary/html'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@cloudinary/ng', ['exports', '@cloudinary/html', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.cloudinary = global.cloudinary || {}, global.cloudinary.ng = {}), global.html, global.ng.core));
}(this, (function (exports, html, core) { 'use strict';

    var APP_VERSION = '1.11.1';

    /**
     * Used by SDK Analytics as a token (?a_{token})
     */
    var SDKAnalyticsConstants = {
        sdkSemver: APP_VERSION,
        techVersion: core.VERSION.full,
        sdkCode: 'K'
    };

    /**
     * @mixin AngularSDK
     * @description The Cloudinary Angular SDK contains components like \<advanced-image\> to easily render your media assets from
     * Cloudinary. The SDK also comes with support for optional JS plugins that make the components smart, with features
     * like lazy loading, placeholder, accessibility & responsiveness.
     *
     * @example
     * <caption>
     *  Please note that the order of the plugins is important. See {@link https://cloudinary.com/documentation/sdks/js/frontend-frameworks/index.html#plugin-order|Plugin Order} for more details.
     * </caption>
     * // In your app.module.ts inject the library.
     * import { CloudinaryModule} from '@cloudinary/angular';
     *
     * imports: [
     *   ...,
     *   CloudinaryModule,
     * ],
     *
     * // In your component.ts use `@cloudinary/url-gen` to generate your transformations.
     * // Import the plugins you wish to use
     *
     * import {CloudinaryImage} from "@cloudinary/url-gen/assets/CloudinaryImage";
     * import {
     *  AdvancedImage,
     *  accessibility,
     *  responsive,
     *  lazyload,
     *  placeholder
     * } from '@cloudinary/angular';
     *
     * ngOnInit() {
     *   const myCld = new Cloudinary({ cloudName: 'demo'});
     *   this.img = myCld().image('sample');
     *
     *   this.plugins = [lazyload(), placeholder()]
     * }
     *
     * // In your view add the component with your transformation.
     * <advanced-image [cldImg]="this.img" [plugins]="this.plugins"></advanced-image>
     */
    /**
     * @memberOf AngularSDK
     * @type {Component}
     * @description The Cloudinary image component.
     * @prop {CloudinaryImage} transformation Generated by @cloudinary/url-gen
     * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()
     * @prop imageAttributes Optional attributes include alt, width, height, loading
     */
    var CloudinaryImageComponent = /** @class */ (function () {
        function CloudinaryImageComponent(el) {
            this.el = el;
        }
        /**
         * On init creates a new HTMLLayer instance and initializes with ref to img element,
         * user generated cloudinaryImage and the plugins to be used.
         */
        CloudinaryImageComponent.prototype.ngOnInit = function () {
            this.htmlLayerInstance = new html.HtmlImageLayer(this.el.nativeElement.children[0], this.cldImg, this.plugins, SDKAnalyticsConstants);
            this.addAttributes();
        };
        /**
         * On update, we cancel running plugins and update the image instance with the state of user
         * cloudinaryImage and the state of plugins.
         */
        CloudinaryImageComponent.prototype.ngOnChanges = function () {
            if (this.htmlLayerInstance) {
                html.cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);
                this.htmlLayerInstance.update(this.cldImg, this.plugins, SDKAnalyticsConstants);
            }
        };
        /**
         * On destroy, we cancel the currently running plugins.
         */
        CloudinaryImageComponent.prototype.ngOnDestroy = function () {
            // safely cancel running events on destroy
            html.cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);
        };
        /**
         * Add attributes to img element.
         */
        CloudinaryImageComponent.prototype.addAttributes = function () {
            var _this = this;
            ['alt', 'width', 'height', 'loading'].forEach(function (attr) {
                if (_this[attr]) {
                    _this.el.nativeElement.children[0].setAttribute(attr, _this[attr]);
                    _this.el.nativeElement.removeAttribute(attr);
                }
            });
        };
        return CloudinaryImageComponent;
    }());
    CloudinaryImageComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'advanced-image',
                    template: "\n    <img />\n  ",
                    styles: [":host{display:block}"]
                },] }
    ];
    CloudinaryImageComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    CloudinaryImageComponent.propDecorators = {
        cldImg: [{ type: core.Input, args: ['cldImg',] }],
        plugins: [{ type: core.Input, args: ['plugins',] }],
        alt: [{ type: core.Input, args: ['alt',] }],
        width: [{ type: core.Input, args: ['width',] }],
        height: [{ type: core.Input, args: ['height',] }],
        loading: [{ type: core.Input, args: ['loading',] }]
    };

    /**
     * @memberOf AngularSDK
     * @type {Component}
     * @description The Cloudinary video component.
     * @prop {CloudinaryVideo} transformation Generated by @cloudinary/url-gen
     * @prop {VideoPoster} transformation Generated by @cloudinary/url-gen
     * @prop {Plugins} plugins Advanced image component plugins lazyload()
     * @prop videoAttributes Optional attributes include controls, loop, muted, poster, preload, autoplay
     * @prop videoEvents Optional video events include play, loadstart, playing, error, ended
     * @prop {VideoSources} sources Optional sources to generate
     * @example
     *  <caption>
     *  Using custom defined resources.
     * </caption>
     *   vid = new CloudinaryVideo('dog', {cloudName: 'demo'});
     *   sources = [
     {
            type: 'mp4',
            codecs: ['vp8', 'vorbis'],
            transcode: videoCodec(auto())
    },
     {
            type: 'webm',
            codecs: ['avc1.4D401E', 'mp4a.40.2'],
             transcode: videoCodec(auto())
          }];
     *
     * <advanced-video [cldvid]="vid" [sources]="sources" controls></advanced-video>
     */
    var CloudinaryVideoComponent = /** @class */ (function () {
        function CloudinaryVideoComponent(el) {
            this.el = el;
            // Event emitters
            this.play = new core.EventEmitter();
            this.loadstart = new core.EventEmitter();
            this.playing = new core.EventEmitter();
            this.error = new core.EventEmitter();
            this.ended = new core.EventEmitter();
            // supported video attributes
            this.controls = this.el.nativeElement.attributes.controls;
            this.loop = this.el.nativeElement.attributes.loop;
            this.muted = this.el.nativeElement.attributes.muted;
            this.preload = this.el.nativeElement.attributes.preload;
            this.autoPlay = this.el.nativeElement.attributes.autoplay;
            this.playsInline = this.el.nativeElement.attributes.playsInline;
        }
        /**
         * On init creates a new HTMLVideoLayer instance and initializes with ref to video element,
         * user generated cloudinaryVideo and the plugins to be used.
         */
        CloudinaryVideoComponent.prototype.ngOnInit = function () {
            this.htmlVideoLayerInstance = new html.HtmlVideoLayer(this.el.nativeElement.children[0], this.cldVid, this.sources, this.plugins, this.getVideoAttributes(), this.cldPoster);
            // check if video should be muted. We need to take care of this here since Angular has a bug with binding the muted
            // attribute
            if (this.muted) {
                this.el.nativeElement.children[0].muted = true;
            }
            // attach ref to innerRef input
            this.attachRef();
        };
        /**
         * On update, we cancel running plugins and update the video instance if the src
         * was changed.
         */
        CloudinaryVideoComponent.prototype.ngOnChanges = function () {
            if (this.htmlVideoLayerInstance) {
                html.cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);
                this.htmlVideoLayerInstance.update(this.cldVid, this.sources, this.plugins, this.getVideoAttributes(), this.cldPoster);
            }
        };
        /**
         * On destroy, we cancel the currently running plugins.
         */
        CloudinaryVideoComponent.prototype.ngOnDestroy = function () {
            // Safely cancel running events on destroy
            html.cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);
        };
        /**
         * Returns video attributes.
         */
        CloudinaryVideoComponent.prototype.getVideoAttributes = function () {
            return {
                controls: this.controls,
                loop: this.loop,
                muted: this.muted,
                poster: this.poster,
                preload: this.preload,
                autoplay: this.autoPlay,
                playsinline: this.playsInline
            };
        };
        CloudinaryVideoComponent.prototype.emitPlayEvent = function () {
            this.play.emit();
        };
        CloudinaryVideoComponent.prototype.emitLoadstartEvent = function () {
            this.loadstart.emit();
        };
        CloudinaryVideoComponent.prototype.emitPlayingEvent = function () {
            this.playing.emit();
        };
        CloudinaryVideoComponent.prototype.emitErrorEvent = function () {
            this.error.emit();
        };
        CloudinaryVideoComponent.prototype.emitEndedEvent = function () {
            this.ended.emit();
        };
        /**
         * Attach both this.videoRef and props.innerRef as ref to the given element.
         */
        CloudinaryVideoComponent.prototype.attachRef = function () {
            if (this.innerRef) {
                this.innerRef.nativeElement = this.el.nativeElement.children[0];
            }
        };
        return CloudinaryVideoComponent;
    }());
    CloudinaryVideoComponent.decorators = [
        { type: core.Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'advanced-video',
                    template: "<video (play)=\"emitPlayEvent()\"\n                    (loadstart)=\"emitLoadstartEvent()\"\n                    (playing)=\"emitPlayingEvent()\"\n                    (error)=\"emitErrorEvent\"\n                    (ended)=\"emitEndedEvent\">\n            </video>"
                },] }
    ];
    CloudinaryVideoComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    CloudinaryVideoComponent.propDecorators = {
        cldVid: [{ type: core.Input, args: ['cldVid',] }],
        cldPoster: [{ type: core.Input, args: ['cldPoster',] }],
        sources: [{ type: core.Input, args: ['sources',] }],
        plugins: [{ type: core.Input, args: ['plugins',] }],
        poster: [{ type: core.Input, args: ['poster',] }],
        innerRef: [{ type: core.Input, args: ['innerRef',] }],
        play: [{ type: core.Output }],
        loadstart: [{ type: core.Output }],
        playing: [{ type: core.Output }],
        error: [{ type: core.Output }],
        ended: [{ type: core.Output }]
    };

    var CloudinaryModule = /** @class */ (function () {
        function CloudinaryModule() {
        }
        return CloudinaryModule;
    }());
    CloudinaryModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [],
                    declarations: [CloudinaryImageComponent, CloudinaryVideoComponent],
                    exports: [CloudinaryImageComponent, CloudinaryVideoComponent]
                },] }
    ];

    /*
     * Public API Surface of cloudinary-library
     */

    /**
     * Generated bundle index. Do not edit.
     */

    Object.defineProperty(exports, 'accessibility', {
        enumerable: true,
        get: function () {
            return html.accessibility;
        }
    });
    Object.defineProperty(exports, 'lazyload', {
        enumerable: true,
        get: function () {
            return html.lazyload;
        }
    });
    Object.defineProperty(exports, 'placeholder', {
        enumerable: true,
        get: function () {
            return html.placeholder;
        }
    });
    Object.defineProperty(exports, 'responsive', {
        enumerable: true,
        get: function () {
            return html.responsive;
        }
    });
    exports.CloudinaryImageComponent = CloudinaryImageComponent;
    exports.CloudinaryModule = CloudinaryModule;
    exports.CloudinaryVideoComponent = CloudinaryVideoComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cloudinary-ng.umd.js.map
