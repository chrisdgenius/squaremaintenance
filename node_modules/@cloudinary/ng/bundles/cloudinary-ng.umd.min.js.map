{"version":3,"sources":["../../src/lib/version.ts","../../src/internal/SDKAnalyticsConstants.ts","../../src/lib/cloudinary-image.component.ts","../../src/lib/cloudinary-video.component.ts","../../src/lib/cloudinary.module.ts"],"names":["SDKAnalyticsConstants","sdkSemver","techVersion","VERSION","full","sdkCode","CloudinaryImageComponent","el","this","prototype","ngOnInit","htmlLayerInstance","HtmlImageLayer","nativeElement","children","cldImg","plugins","addAttributes","ngOnChanges","cancelCurrentlyRunningPlugins","htmlPluginState","update","ngOnDestroy","_this","forEach","attr","setAttribute","removeAttribute","Component","args","selector","template","ElementRef","Input","CloudinaryVideoComponent","play","EventEmitter","loadstart","playing","error","ended","controls","attributes","loop","muted","preload","autoPlay","autoplay","playsInline","htmlVideoLayerInstance","HtmlVideoLayer","cldVid","sources","getVideoAttributes","cldPoster","attachRef","poster","playsinline","emitPlayEvent","emit","emitLoadstartEvent","emitPlayingEvent","emitErrorEvent","emitEndedEvent","innerRef","Output","NgModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["export let APP_VERSION = '1.11.1';\n","import {VERSION} from '@angular/core';\nimport {APP_VERSION} from '../lib/version';\n\n/**\n * Used by SDK Analytics as a token (?a_{token})\n */\nexport const SDKAnalyticsConstants = {\n  sdkSemver: APP_VERSION,\n  techVersion: VERSION.full,\n  sdkCode: 'K'\n};\n","import {Component, OnInit, Input, ElementRef, OnDestroy, OnChanges} from '@angular/core';\nimport {CloudinaryImage} from '@cloudinary/url-gen/assets/CloudinaryImage';\nimport {\n  cancelCurrentlyRunningPlugins,\n  HtmlImageLayer,\n  Plugins\n} from '@cloudinary/html';\nimport {SDKAnalyticsConstants} from '../internal/SDKAnalyticsConstants';\n\n/**\n * @mixin AngularSDK\n * @description The Cloudinary Angular SDK contains components like \\<advanced-image\\> to easily render your media assets from\n * Cloudinary. The SDK also comes with support for optional JS plugins that make the components smart, with features\n * like lazy loading, placeholder, accessibility & responsiveness.\n *\n * @example\n * <caption>\n *  Please note that the order of the plugins is important. See {@link https://cloudinary.com/documentation/sdks/js/frontend-frameworks/index.html#plugin-order|Plugin Order} for more details.\n * </caption>\n * // In your app.module.ts inject the library.\n * import { CloudinaryModule} from '@cloudinary/angular';\n *\n * imports: [\n *   ...,\n *   CloudinaryModule,\n * ],\n *\n * // In your component.ts use `@cloudinary/url-gen` to generate your transformations.\n * // Import the plugins you wish to use\n *\n * import {CloudinaryImage} from \"@cloudinary/url-gen/assets/CloudinaryImage\";\n * import {\n *  AdvancedImage,\n *  accessibility,\n *  responsive,\n *  lazyload,\n *  placeholder\n * } from '@cloudinary/angular';\n *\n * ngOnInit() {\n *   const myCld = new Cloudinary({ cloudName: 'demo'});\n *   this.img = myCld().image('sample');\n *\n *   this.plugins = [lazyload(), placeholder()]\n * }\n *\n * // In your view add the component with your transformation.\n * <advanced-image [cldImg]=\"this.img\" [plugins]=\"this.plugins\"></advanced-image>\n */\n\n/**\n * @memberOf AngularSDK\n * @type {Component}\n * @description The Cloudinary image component.\n * @prop {CloudinaryImage} transformation Generated by @cloudinary/url-gen\n * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()\n * @prop imageAttributes Optional attributes include alt, width, height, loading\n */\n@Component({\n  selector: 'advanced-image',\n  template: `\n    <img />\n  `,\n  styleUrls: ['./cloudinary-image.component.css']\n})\nexport class CloudinaryImageComponent implements OnInit, OnChanges, OnDestroy {\n  @Input('cldImg') cldImg: CloudinaryImage;\n  @Input('plugins') plugins: Plugins;\n  @Input('alt') alt: string;\n  @Input('width') width: string;\n  @Input('height') height: string;\n  @Input('loading') loading: string;\n  htmlLayerInstance: HtmlImageLayer;\n  constructor(private el: ElementRef) { }\n\n  /**\n   * On init creates a new HTMLLayer instance and initializes with ref to img element,\n   * user generated cloudinaryImage and the plugins to be used.\n   */\n  ngOnInit() {\n    this.htmlLayerInstance = new HtmlImageLayer(this.el.nativeElement.children[0], this.cldImg, this.plugins, SDKAnalyticsConstants);\n    this.addAttributes();\n  }\n\n  /**\n   * On update, we cancel running plugins and update the image instance with the state of user\n   * cloudinaryImage and the state of plugins.\n   */\n  ngOnChanges() {\n    if (this.htmlLayerInstance) {\n      cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);\n      this.htmlLayerInstance.update(this.cldImg, this.plugins, SDKAnalyticsConstants);\n    }\n  }\n\n  /**\n   * On destroy, we cancel the currently running plugins.\n   */\n  ngOnDestroy() {\n    // safely cancel running events on destroy\n    cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);\n  }\n\n  /**\n   * Add attributes to img element.\n   */\n  addAttributes() {\n    ['alt', 'width', 'height', 'loading'].forEach(attr => {\n      if (this[attr]) {\n        this.el.nativeElement.children[0].setAttribute(attr, this[attr]);\n        this.el.nativeElement.removeAttribute(attr);\n      }\n    });\n  }\n}\n","import {Component, OnInit, Input, ElementRef, EventEmitter, Output, OnChanges, OnDestroy} from '@angular/core';\nimport {CloudinaryVideo} from '@cloudinary/url-gen';\n\nimport {\n  cancelCurrentlyRunningPlugins,\n  HtmlVideoLayer,\n  Plugins,\n  VideoPoster,\n  VideoSources\n} from '@cloudinary/html';\n\n\n/**\n * @memberOf AngularSDK\n * @type {Component}\n * @description The Cloudinary video component.\n * @prop {CloudinaryVideo} transformation Generated by @cloudinary/url-gen\n * @prop {VideoPoster} transformation Generated by @cloudinary/url-gen\n * @prop {Plugins} plugins Advanced image component plugins lazyload()\n * @prop videoAttributes Optional attributes include controls, loop, muted, poster, preload, autoplay\n * @prop videoEvents Optional video events include play, loadstart, playing, error, ended\n * @prop {VideoSources} sources Optional sources to generate\n * @example\n *  <caption>\n *  Using custom defined resources.\n * </caption>\n *   vid = new CloudinaryVideo('dog', {cloudName: 'demo'});\n *   sources = [\n {\n        type: 'mp4',\n        codecs: ['vp8', 'vorbis'],\n        transcode: videoCodec(auto())\n},\n {\n        type: 'webm',\n        codecs: ['avc1.4D401E', 'mp4a.40.2'],\n         transcode: videoCodec(auto())\n      }];\n *\n * <advanced-video [cldvid]=\"vid\" [sources]=\"sources\" controls></advanced-video>\n */\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'advanced-video',\n  template: `<video (play)=\"emitPlayEvent()\"\n                    (loadstart)=\"emitLoadstartEvent()\"\n                    (playing)=\"emitPlayingEvent()\"\n                    (error)=\"emitErrorEvent\"\n                    (ended)=\"emitEndedEvent\">\n            </video>`,\n})\nexport class CloudinaryVideoComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(private el: ElementRef) { }\n\n  @Input('cldVid') cldVid: CloudinaryVideo;\n  @Input('cldPoster') cldPoster: VideoPoster;\n  @Input('sources') sources: VideoSources;\n  @Input('plugins') plugins: Plugins;\n  @Input('poster') poster: string;\n  @Input('innerRef') innerRef: ElementRef;\n\n  // Event emitters\n  @Output() play: EventEmitter<any> = new EventEmitter();\n  @Output() loadstart: EventEmitter<any> = new EventEmitter();\n  @Output() playing: EventEmitter<any> = new EventEmitter();\n  @Output() error: EventEmitter<any> = new EventEmitter();\n  @Output() ended: EventEmitter<any> = new EventEmitter();\n\n  // supported video attributes\n  controls = this.el.nativeElement.attributes.controls;\n  loop = this.el.nativeElement.attributes.loop;\n  muted = this.el.nativeElement.attributes.muted;\n  preload = this.el.nativeElement.attributes.preload;\n  autoPlay = this.el.nativeElement.attributes.autoplay;\n  playsInline = this.el.nativeElement.attributes.playsInline;\n\n  private htmlVideoLayerInstance: HtmlVideoLayer;\n\n  /**\n   * On init creates a new HTMLVideoLayer instance and initializes with ref to video element,\n   * user generated cloudinaryVideo and the plugins to be used.\n   */\n  ngOnInit() {\n    this.htmlVideoLayerInstance = new HtmlVideoLayer(\n      this.el.nativeElement.children[0],\n      this.cldVid,\n      this.sources,\n      this.plugins,\n      this.getVideoAttributes(),\n      this.cldPoster\n      );\n\n    // check if video should be muted. We need to take care of this here since Angular has a bug with binding the muted\n    // attribute\n    if (this.muted) {\n      this.el.nativeElement.children[0].muted = true;\n    }\n\n    // attach ref to innerRef input\n    this.attachRef();\n  }\n\n  /**\n   * On update, we cancel running plugins and update the video instance if the src\n   * was changed.\n   */\n  ngOnChanges() {\n    if (this.htmlVideoLayerInstance) {\n      cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);\n      this.htmlVideoLayerInstance.update(this.cldVid, this.sources, this.plugins, this.getVideoAttributes(), this.cldPoster);\n    }\n  }\n\n  /**\n   * On destroy, we cancel the currently running plugins.\n   */\n  ngOnDestroy() {\n    // Safely cancel running events on destroy\n    cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);\n  }\n\n  /**\n   * Returns video attributes.\n   */\n  getVideoAttributes() {\n    return {\n      controls: this.controls,\n      loop: this.loop,\n      muted: this.muted,\n      poster: this.poster,\n      preload: this.preload,\n      autoplay: this.autoPlay,\n      playsinline: this.playsInline\n    };\n  }\n\n  emitPlayEvent() {\n    this.play.emit();\n  }\n\n  emitLoadstartEvent() {\n    this.loadstart.emit();\n  }\n\n  emitPlayingEvent() {\n    this.playing.emit();\n  }\n\n  emitErrorEvent() {\n    this.error.emit();\n  }\n\n  emitEndedEvent() {\n    this.ended.emit();\n  }\n\n  /**\n   * Attach both this.videoRef and props.innerRef as ref to the given element.\n   */\n  attachRef() {\n    if (this.innerRef) {\n      this.innerRef.nativeElement = this.el.nativeElement.children[0];\n    }\n  }\n}\n","import { NgModule, enableProdMode } from '@angular/core';\nimport { CloudinaryImageComponent } from './cloudinary-image.component';\nimport { CloudinaryVideoComponent } from './cloudinary-video.component';\n\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [CloudinaryImageComponent, CloudinaryVideoComponent],\n  exports: [CloudinaryImageComponent, CloudinaryVideoComponent]\n})\nexport class CloudinaryModule { }\n"]}